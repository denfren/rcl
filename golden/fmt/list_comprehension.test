// With a single element, there is never a separator, even when it is tall.
let tall = [
  for x in some_very_long_function_name():
  if x.frobnicator.is_activated_on("Tuesday"):
  let marzlevanes =
    x.hydrocoptics.marzlevanes; marzlevanes,
];

// The depth of the comprehension matters. Even if it would fit,
// we format those deeper than 2 as tall.
let wide = [for x in tall_long_if_active_on_tuesday(): x.inner];
let tall = [for x in tall: if x.active_on_tuesday(): x.inner];

// The next one demonstrates that we should be able to have two comprehensions
// in a collection, and if the comprehension itself fits, it should not
// line-wrap.
let double_comprehension = [
  for m in extract_marzlevanes()
    .is_hydrocoptic():
  m.frobnicated(),
  for h in extract_hydrocoptics()
    .is_marzlevane():
  h.frobnicated(),
];
// TODO: All-or-nothing let chain wide or tall.
let b = [
  1,
];
a + b

# output:
// With a single element, there is never a separator, even when it is tall.
let tall = [
  for x in some_very_long_function_name():
  if x.frobnicator.is_activated_on("Tuesday"):
  let marzlevanes = x.hydrocoptics.marzlevanes;
  marzlevanes
];

// The depth of the comprehension matters. Even if it would fit,
// we format those deeper than 2 as tall.
let wide = [for x in tall_long_if_active_on_tuesday(): x.inner];
let tall = [
  for x in tall:
  if x.active_on_tuesday():
  x.inner
];

// The next one demonstrates that we should be able to have two comprehensions
// in a collection, and if the comprehension itself fits, it should not
// line-wrap.
let double_comprehension = [
  for m in extract_marzlevanes().is_hydrocoptic(): m.frobnicated(),
  for h in extract_hydrocoptics().is_marzlevane(): h.frobnicated(),
];
// TODO: All-or-nothing let chain wide or tall.
let b = [1]; a + b
