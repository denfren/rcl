let f =
 (
 ) => "short value";

let g1 = (
arg1,
arg2) => [very_long_name_1, very_long_name_2, very_long_name_3, very_long_name_4, very_long_name_5];
let g2 = (rec_self, k) =>
  if {0, 1}.contains(k):
    1
  else:
    rec_self(rec_self, k - 1) + rec_self(rec_self, k - 2);

let h = (very_long_name_1, very_long_name_2, very_long_name_3, very_long_name_4, very_long_name_5) => 42;

let doc1 = (
  // This goes before arg1.
  x
) => 42;

let doc2 = (
  // Argument 1.
  arg1,

  // Argument 2.
  arg2
) => 42;

let with_lets = (widgets, frobnicators) =>
  let frobnicated_widgets = [
    for widget in widgets:
    for frobnicator in frobnicators:
    frobnicator(widget)
  ];
  [for w in frobnicated_widgets: w.turbo_encabulator];

(arg1)

=> "should remove parens"

# output:
let f = () => "short value";

let g1 = (arg1, arg2) => [
  very_long_name_1,
  very_long_name_2,
  very_long_name_3,
  very_long_name_4,
  very_long_name_5,
];
let g2 = (rec_self, k) =>
  if {0, 1}.contains(k):
    1
  else:
    rec_self(rec_self, k - 1) + rec_self(rec_self, k - 2);

let h = (
  very_long_name_1,
  very_long_name_2,
  very_long_name_3,
  very_long_name_4,
  very_long_name_5,
) => 42;

let doc1 = (
  // This goes before arg1.
  x,
) => 42;

let doc2 = (
  // Argument 1.
  arg1,

  // Argument 2.
  arg2,
) => 42;

let with_lets = (widgets, frobnicators) =>
  let frobnicated_widgets = [
    for widget in widgets:
    for frobnicator in frobnicators:
    frobnicator(widget)
  ];
  [for w in frobnicated_widgets: w.turbo_encabulator];

arg1 => "should remove parens"
