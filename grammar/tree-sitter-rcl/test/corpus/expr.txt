========
Empty {}
========

{}

---

(source_file
  (expr_term_braces))

======
Idents
======

[
  CamelCase1337,
  snake_case,
  __internal_snake_case,
  SCREAMING_SNAKE_CASE,
  kebap-case,
]

---

(source_file
  (expr_term_brackets
    (seq_elem
      (ident))
    (seq_elem
      (ident))
    (seq_elem
      (ident))
    (seq_elem
      (ident))
    (seq_elem
      (ident))))

==========
Call empty
==========

f()

---

(source_file
  (expr_call
    (ident)))

===================
Call trailing comma
===================

f("x",)

---

(source_file
  (expr_call
    (ident)
    (string)))

======================
Call no trailing comma
======================

f("x", y)

---

(source_file
  (expr_call
    (ident)
    (string)
    (ident)))

=====
Index
=====

collection["index"]

---

(source_file
  (expr_index
    (ident)
    (string)))

========
Unop not
========

not x

---

(source_file
  (expr_unop
    (unop)
    (ident)))

============
Unop not not
============

// This is fine without parens.
not not x

---

(source_file
  (comment)
  (expr_unop
    (unop)
    (expr_unop
      (unop)
      (ident))))

=========
Binop and
=========

x and y

---

(source_file
  (expr_binop_and
    (ident)
    (ident)))

=============
Binop and and
=============

x and y and z

---

(source_file
  (expr_binop_and
    (ident)
    (ident)
    (ident)))

============
Binop and or
============

// Mixing operators without parens is an error.
x and y or z

---

(source_file
  (comment)
  (expr_binop_and
    (ident)
    (ERROR
      (ident)
      (ident))
    (ident)))

==============
Number decimal
==============

[0, 10, 1_0, 0.1, 0.1_0, 1e12]

---

(source_file
  (expr_term_brackets
    (seq_elem (number (num_decimal)))
    (seq_elem (number (num_decimal)))
    (seq_elem (number (num_decimal)))
    (seq_elem (number (num_decimal)))
    (seq_elem (number (num_decimal)))
    (seq_elem (number (num_decimal)))))

======================
Number invalid decimal
======================

00

---

(source_file
  (number (num_decimal))
  (ERROR (num_decimal)))

=============
Number binary
=============

0b11_00

---

(source_file
  (number (num_binary)))

==================
Number hexadecimal
==================

0xff_01

---

(source_file
  (number (num_hexadecimal)))
